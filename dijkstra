int shortest(int source, int destination,int n) {
        vector<int>dist(n, 1e9);
        priority_queue<pair<int ,int>,vector<int,int>,greater<>>pq;
        pq.push({dist[source],source});
        while(!pq.empty()) {
              auto[d,node] = pq.top();
              pq.pop();
              if(node == destination) return d;
              for(auto&it : mp[node]) {
                  if(dist[it.first] > dist[node] + it.second)  {
                      dist[it.first] = dist[node] + it.second ;
                      pq.push({dist[it.first],it.first});
                  }
              }
          }
        return dist[destination];
    }
